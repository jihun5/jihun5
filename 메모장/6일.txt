# 하나의 변수로 여러개의 데이터를 관리
# list의 경우 [] 대괄호를 사용한다.
lista = ["a","b","c","d","e","f","g"]

# list안의 각각의 값에 접근할 때에는 index를 사용
print(lista[0])
print(lista[1])

# 여러개의 데이터의 범위를 지정해서 가져오고 싶을 때는 slicing 사용
# 슬라이싱의 결가 값은 같은 list로 출력
# 0~5번째까지 출력
print(lista[:5])
# 0~5번째까지 출력한 결과물의 type출력
print(type(lista[:5]))

# list안에 list 값을 조회 및 덧셈하는 방법
list_ex1 = ['a','b','c',[1,2,3]]
number = list_ex1[3]
print(number[0]+number[2]) # = print(list_ex1[3][0] + list_ex1[3][2])

# 문자를 리스트화 할때(길이 구하기)
a = "abcdefghi"
listx = list(a)
print(listx)
count = 0
for b in listx:
    count = count +1
print(count)
print(len(a))

# 리스트 더하기 또는 곱하기
# list를 2개 선언하고 만들어서, 2개를 더해서 하나의 리스트를 만들어보자 그리고 출력
listb = [1,2,3,4,5]
listc = [6,7,8,9,10]
print(listb+listc)
print(listb[:]+listc[:])
print(listb*10)
print(list)

# 리스트 길이 구하기 : len
print(len(listb))

# 리스트 값 수정하기 -> 1개의 값만 바꿀 땐 1개의 값으로 대체
# 여러값을 바꿀땐 다른 리스트로 대체

listd = [1,3,5,6,7,9]
listd[1] = 4
print(listd)
listd[2] = [5,5,5]
print(listd)

# list.count값 찾기
liste = ["1","2","3","4","1","1","3"]
print(liste.count("1"))

# list 요소 삭제하기(del) del 리스트명 index, sling
listf = [1,3,5,7,9,10]
del listf[3]
print(listf)
del listf[2:5]
print(listf)

# 리스트 요소 삭제하기(remove) 리스트.remove(삭제하고싶은 요소의 순번)
listf = [1,3,5,7,9,10]
listf.remove(3)
print(listf) # 중복일 경우 앞의 숫자를 삭제

# 모든 특정한 9값을 삭제해보아라 del, for range
# 방법1
listg = [1,3,3,1,4,2,5,11,1]
count = 0
for i in range(0, len(listg)):
    if listg[i-count] == 1: #인덱스의 범위 내에서 1을 줄인 listg를 소환
        del listg[i-count] #인덱스의 범위 내에서 1을 줄인 listg를 소환해서 listg에서 1을 삭제
        count = count +1 #1을 지우면서 하나씩 줄어드는 
                        # 인덱스의 수를 맞추어 오류를 발생하지 않게함
print(listg)

# 방법2
while True:
for a in range(0, len(listg)):
    if 1 in listg:
        listg.remove(1)
    else:
        break
    # listg에 1이 포함되어있다면 1을 삭제하고 
    # 1번부터 8번까지 다시 1이 있는 지 검토하고 1이 있으면 삭제함
print(listg)

# 방법3
listh = []
for a in range(0, len(listg)):
    if listg[a] !=1:
        # listh = listh + lista[g]]
        # 또는 append
        listh = listh + [listg[a]]
        # listh.append(listg[g]) 
        # 새롭게 만들어진 h리스트에 1을 제외한 항목들을 계속 더해가는 것
print(listh)

# list append : 리스트 맨 뒤로 추가
listi = [1,3,5,7]
# 9,10을 append이용해서 추가해서 출력 
listi.append(9)
listi.append(10) #동시에 2개는 안됨
print(listi)

# list insert : index를 지정하여 추가가능
# listi.index(2, "abc") 추가 후 출력 
listi.insert(2, "abc")
print(listi)
# list extend : interable 객체를 list에 추가할때 사용
# extend는 각 요소를 꺼내어 맨 뒤에 추가

listj = [10,20,30]
listi.append(listj) # append는 리스트 형식 그래도 추가
print(listi)
listi.extend(listj) # 리스트를 요소 형식으로 추가
print(listi)

# list의 정렬은 srot()함수 사용
# sort()는 오름차순 정렬
# reverse=True는 내림차순 정렬
numa = [5,3,18,4,2,1]
numa.sort()
print(numa)
numa.sort(reverse=True)
print(numa)
print(numa[0]) # 내림차순 시 가장 점수가 높은 사람

# 문자의 정렬
chlist = ['brad','john','abc']
chlist.sort()
print(chlist) #알파벳 순서, 한글 순서 a b c, ㄱ ㄴ ㄷ

# list(뒤집기) : reverse()
chlist.reverse()
print(chlist)

# list위치 반환 : index
lista = ["김돌쇠", "김갑돌", "김갑순", "김철수"]
print(lista.index("김철수"))
#  배열(타 언어) = 리스트 

# 마지막요소 끄집어 내기 : pop()
# remove and return last value
lista.pop()
lastValue = lista.pop() # pop이 실행이 되는순간 remove가 
                        # 되기때문에 김철수가 지워지고 그 다음 마지막인 김갑순이 출력
print(lastValue)

a = 10
b = 20
result = 0
# 만약에 ~하면 result = 1 그렇지 않으면 result = -1

# 문자 리스트를 문자열로 만들기
lista = ["hello","world","python"]
st1 = ""
st2 = st1.join(lista) # "".join(lista) 도 똑같음
print(st2)
# for a in lista:
#     st1 = st1 + a
# print(st1)
# 문자열을 문자 리스트로 만들기
sta = "hello world python"
mySta = list(sta)
mysta2 = sta.split()
print(mySta)
print(mysta2)

 # 딕셔너리 자료형은 key와 value로 이루어져있다.
# 영어 사전에서 단어와 뜻으로 이루어져 있던 것에서 유래
# key : 핵심 -> value : 가치(값), 키값 = value
dic1 = {'이름': '홍길동', '나이':25, '성별':'남'}
# set과 dictionary는 거의 유사함

# 딕셔너리의 특징 1
# key는 중복이 불가, value는 다른 key에도 존재할 수 있다.

# 파이썬 에서의 dictionary는 다른언어에서는 ditcionary 는 hashmap, or map으로 부른다
# 다른 language(java, javascript 등)의 map(key, value) 또는 
# hashmap(key, value, 암호화 함수(비밀번호 ->변수+비밀번호, 원래 비밀번호를 모르게))과 유사한 자료형
# json 이라는 자료형태와도 유사하다.(JSON은 JavaScript 객체 리터럴(콘텐츠 그대로 대입), 
# 배열, 스칼라 데이터(단 하나의 값만 저장할 수 있는 데이터)를 표현하는 텍스트 기반의 방식입니다.)
dic1 = {'이름': '홍길동', '나이':25, '성별':'남', '성별':'여'}
# dic1 = {'이름': '홍길동', '나이':25,' 몸무게':25 ,'성별':'남', '성별':'여'} value는 중복이 가능
print(dic1) # 같은 key 값이 출력이 되지 않고 {성별 : '여'} 만이 출력됨
result = {'1':80, "2":90, '3':100, '4':10}
print(result) 

# 딕셔너리의 기본호출 방식은 변수명[key], 변수명.get(key)
print(dic1['나이'])
print(dic1.get('나이'))

# 리스트는 a = [value, ...] 딕셔너리는 a = {key:value, ...} 튜플은 a = (value, ...)
# 리스트와 튜플은 a[index], 딕셔너리는 a[key]

# 딕셔너리의 특징 2 index(순번)
# key와 value로 이루어져 이루어져 있다보니, 순서가 의미가 없다. index로 접근 불가(순차적 data X)
# key를 가지고 value를 검색할때 해시함수를 통해 index를 찾다보니, 매우 빠른 속도를 보장
# ex) 키값을 난수로 표현(순서가 중구난방이 됨)
# -> 비밀번호를 입력시 바로 로그인이 되는 방식(key값), 
# -> 리스트의 경우 n번째까지 찾아보고 나의 비밀번호를 찾아야 로그인이 되는 방법
# -> 리스트 보다 딕셔너리의 처리 속도가 훨씬 빠른 이유

# key:value 추가
dic1 = {'이름': '홍길동', '나이':25, '성별':'남', '성별':'여'}
dic1['신분'] = '학생'
print(dic1)

# 딕셔너리에서 키를 이용한 key:value 삭제
del dic1['성별']
print(dic1)

# 딕셔너리에서 key 목록만을 뽑아낼때
# iterable한 형태로 data가 뽑아져 나오므로 for문 사용가능
keylist = dic1.keys()
print(keylist)

# 위의 keylist에서 각각의 값을 출력해보자.
# 출력값 
# 이름
# 나이
# 신분
for k in keylist:
    print(k)
#  = for k in dic1:
#      print(k)
# for i in range(0, len(keylist)):
#     print(keylist[i]) -> index 값을 가지고 있지 않다는 증거

# value 목록을 뽑아낼때는 .values()
valuelist = dic1.values()
print(valuelist)
for i in valuelist:
    print(i)

for v in dic1.values():
    print(v)

dic1 = {'이름': '홍길동', '나이':25, '성별':'남', '성별':'여'}
키 값을 출력해주는 for 문 안에서 value 값도 같이 출력해보자
for k in keylist:
        print(k)
        print(dic1[k])

 위의 for 문을 활용해서 key가 담긴 list를 만들고, value가 담긴 list를 만들어보기
 1.
 lista = list(dic1.keys())
 print(lista)
 listb = list(dic1.values())
 print(listb)
 2. append
t1 = []
t2 = []
for k in keylist:
        t1.append(k) # t1 = [] 반복시 계속 리셋이되기때문에 for문 안에 넣으면 안된다
        t2.append(dic1[k])
print(t1)
print(t2)

 딕셔너리의 확장 : update함수
dic1 = {"a":1, "b":2, "c":3}
dic2 = {"a":2, "d":4, "f":5}
dic1.update(dic2)
print(dic1) # 중복되는 key 값 a:1 삭제후 a:2 남음

★lista = ['A', 'A', 'B','O','O','AB','AB']
딕셔너리로 변환해서 출력해보자
예를 들어 'A':2, 'B':1 .. 등으로 출력 되도록 코딩해보자. not in, in
hint : a not in dicta.key() if p1 not in payMethod: # not in 포함이 되지 않으면(범위 안에없으면 참)
dicta = {}
count = 0
if "A" in lista:
     print(lista.count("A")) A가 2개 있다.
if "B" in lista:
     print(lista.count("B")) B가 1개 있다.

 dicta에 'A':1 을 어떻게 세팅하는가?
 dicta["A"] = 2
 dicta = {}
 for a in lista:
     if 'A' in lista:
         dicta['A'] = lista.count("A")
 print(dicta)

방법 1
dicta = {}
for a in lista:
    if a not in dicta.keys():
        dicta[a] = 1 # A:1
    else:
        dicta[a] = dicta[a] + 1
print(dicta)

 방법 2
if a not in dicta.keys():
    dicta[a] = lista.count(a)
print(dicta)