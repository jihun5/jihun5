a01ac146edc6  : 내컨테이너 아이디

docker -a : 종료된 컨테이너 까지 나오고
docker start (내컨테이너아이디) : docker 시작
docker ps : 현재 docker상태확인

doker ps -a : a는 all, 종료된 프로그램까지 조회
docker ps : 실행중인 프로그램 조회

docker start 컨테이너 ID
docker stop 컨테이너 ID
docker images : 도커 이미지 목록을 조회하는 명령어
docker run -it --name my_ubuntu ubuntu
:이름을 지정해서 우분투 리눅스 프로세스 생성
우분투는 최초 생성 후 exit하게 되면 , 종료되므로 다시 start시켜줘야한다.
docker 프로세스 삭제
1)docker stop 컨테이너 ID
2)docker rm 컨테이너ID

docker rmi 이미지ID
우분투 실행시
docker run -it --name my_ubuntu
나머지 대부분의 프로그램
docker run --name my_mysql(내가 지정한 이름) mysql

docker 컨테이너 내부로 접속
: docker exec -it my_ubuntu /bin/bash
my_ubuntu(내 컨테이너 명)

리눅스 명령어
디렉토리(폴더) 이동: cd 이동할 위치
pwd : 현재 위치 조회 명령어
최상단root경로는 /로 표현
root계정은 모든 계정이 있는 super계정
파일/디렉토리 목록 조회 : ls -al(권한,수정,생성된날짜 등)
ls - al test* : test로 시작하는 파일/ 폴더 조회 

상위폴더로 이동하는 법
1)상대경로 : cd ..
2)절대경로 : /etc
.은 현재 경로를 의미, ..은 상위경로를 의미
그냥 cd만 치면 홈 경로
cd / 하면 루트경로로 이동
cd 디렉토리명을 입력하면 디렉토리로 이동

rm-r 디렉토리명(폴더명):디렉토리 삭제
clear : 명령어 정리
mkdir +폴더명: 디렉토리 생성 명령어
rm은 디렉토리/파일 삭제
ctrl + C:실행중 명령어 취소
touch 파일명 : 빈 파일 생성
rm 삭제대상1 삭제대상2
rm -r 삭제대상1 삭제대상2(파일은 -r안에서도 삭제가능)

histroy : 사용했던 명령어의 history
cp 복사대상 복사할 곳 : 파일이나 디렉토리 복사 후 붙여넣기
cp 복사대상 복사할 위치와 파일명
cp -r: 하면 디렉토리까지 모두 복사
mv 이동대상 이동할 곳: 파일이나 디렉토리를 이동
mv : 잘라내서 붙여넣기, 이동, 이름을 바꿀때 사용
(mv test.txt ../test.txt, mv test.txt my_folder)
mv를 사용해서 /etc/myfolder에서 test_folder를 test2_folder
mv test_folder test2_folder (같은 위치에 tset폴더를 test2로 이름변경)
mv test_folder ./test2_folder(./현재위치에 )

test_folder를 상위폴더의 위치로 test2_folder

test.txt를 상위폴더로 이동

cat 파일명 : 파일 내용을 터미널(콘솔)에 출력
리눅스 vi편집기
리눅스 패키지 tool : apt
apt-get update : 패키지를 최신화
apt-get install vim : vi 편집기 install
sudo apt-get install vim(root의 계정의 권한을 빌려 vim설치)
vi test.txt 엔터 test.py도 무관함 그 파일 또는 py쪽으로 이동 
i 누르면 insert활성화 채팅치고 
esc 쉬프트 세미클론 
wq는 저장 q는 그냥 저장안하고 나가기(!하면 무조건 그냥 실행하기ex)q!)
esc는 명령모드 상태
insert상태가 아닌 첫 화면에서 빈 곳에 커서를 두고 x를 누르면 해당 칸삭제
attention 상태면 쭉내려서 e누르기
yy는 해당 줄 복사
p는 복사 한 줄 출력
gg는 첫번째 줄으로 이동
shift g는 맨 끝줄으로 이동
dd는 한줄 삭제
ctrl f 아래 페이지씩 이동
ctrl b는 위 페이지로 이동
e는 단어의 끝까지 가는것
$는 문장의 끝으로 가는 것 
숫자 0은 해당라인에서 맨앞으로 이동

sudo 명령어 : root계정의 권한을 빌려 명령어를 실행하는 것.
(sudo계정도 명령어도 회사 내규에따름)

chmod : 파일/디렉토리에 대한 권한 설정권한은 3개의 part로 구성되어있다. 
           (소유자(onwer), 소유자그룹(owner Group), others(그외))
	각파트는 rwx로 구성(read, write, 실행)
drwxr-xr-x(권한) 3 root root(소유,소유그룹) 4096(용량) jun 2 02:50(디폴트 utc시간, kst한국시간은 +9를해야)
drwxr-xr-x(권한) 1 root root(소유,소유그룹) 4096(용량) jun 2 02:50(utc시간)
-rw-(소유자readwirte)r--(소유자그룹)r--(그외)(권한)  1 root root(소유,소유그룹) 139(용량) jun 2 02:50(utc시간)
소유자그룹은 쓰고 읽을 수 있다. 소유자 그룹과 소유자는 읽을수만있다(수정, 삭제불가)
r:숫자4, w숫자2, x:숫자1
chmod 777 test.txt(rwx) 7=소유자,소유자그룹,그외 4+2+1 모든권한
= test.txt에 소유자, 소유자그룹, 그외 모든사람들에게 read write 실행 권한을 부여
소유자가 읽고, 쓸수 있는 권한이 있고, 그외 소유자그룹, other는 읽기 권한만 있도록 파일 권한 변경
= chmod 644

chown 소유자 : 소유자의 그룹 -> 해당 파일/디렉토리의 소유자와 소유자 그룹을 지정하는 명령어 
소유자 : 만든사람
소유자그룹 : 특정한 사용자 list를 그룹으로 묶어 놓은 개념, 
	    리눅스에서 모든 사용자는 어떠한 소유자 그룹에 소속되어있다
chown test:testgroup test.txt(파일명) test(계정명)에 test그룹(계정그룹명) 

grep : 특정문자열을 찾을 때 사용
find : 특정한 파일을 찾을 때 사용 
 
mysql 데이터 베이스 server > 스키마n개 > 테이블n개

docker run --name board_mysql -e MYSQL_ROOT_PASSWORD=1234 -d -p 3406:3306 mysql
3406:3306 폰트는 바꿨음

docker exec -it 컨테이너ID mysql -u root -p 
->mysql 접속 비밀번호는 창에 안뜸 비밀이지만 입력가능

mysql 문법
show databases;  데이터베이스(스키마)의 목록 조회, 반드시 ; 붙이기
모든 SQL 반드시 ; 으로 끝맺음.

create database board;  데이터 베이스(스키마) 생성
use board;  데이터 베이스 board 사용
create table 테이블이름 create table author(id INT)
-> ex)  create table author(id(필드이름) INT(필드타입), name VARCHAR(10), email VARCHAR(20));
show tables;  테이블보기
describe author;  테이블의 구성조회
테이블 : 
1) 열(column) = 필드 = 속성이라 부른다 
2) 행(row) = 데이터 = 레코드
drop table author;

DDL : 테이블/컬럼(id,int 등) 정의하는 명령어
1) create table ~, 
2) alter table ~, 
3) drop table ~

DML : 데이터 조회, 추가/수정/삭제(=CRUD : 추가, 조회, 수정, 삭제를 의미)
select ~, insert, update, delete
insert into 테이블 명(필드명1, 필드명2, 필드명3...) values(데이터값1, 데이터값2, 데이터값3....);
INSERT INTO author(id, name, email) valuse(1,'LEO','leo@gmail.com');
SELECT 필드이름(*,all) FROM 테이블 이름 [WHERE 조건]
select * from author;(*전체 조회)
select name, email from author;(name과 email만 조회)
limit 숫자 옵션을 주면 제한된 데이터만 조회 가능
ex) select * from author limit 1;
ex) select * from author where id = 1;
and 조건 id가 4이상이고 이름은 hongildong인사람 조회
ex) select * from author where id >= 4 and name = 'hongildong'
- #을 써서 sql문 내에서 주석
# id가 4이상, name은 hongildong 
쿼리문은 관용적으로 대문자 사용(대소문자구문X) 문자열은 쌍따옴표가 아닌 홑따옴표
테이블명, 컬럼명은 대소문자 구분O
컬럼 생성 시 별다른 null관련 옵션을 주지 않으면 기본적으로 nullable(null은 비어있는 값)
Primary Key(PK) : 테이블에 저장된 레코드를 고유하게 식별하는 컬럼, Not Null + Unique
Foreing Key(FK) : 두 테이블을 연결하는 데 사용하는 KEY
mysql에서 두 단어가 결합된 컬럼명을 지정할 때 a단어_b단어 형태로ex) create_at
INT(4바이트 할당), BIGINT(8바이트 할당), 4바이트는 약 20~40억 까지 표현가능

ex) create table author(id BIGINT auto_increment, name VARCHAR(20), email VARCHAR(40) NOT NULL, pw VARCHAR(20), ro
le VARCHAR(10), created_at DATETIME, PRIMARY KEY(id))
mysql에서 DATETIME 형식은 오른쪽과 같은  시간대를 표현하는 데이터타입이다. ex) '2023-06-05 시간:분:초'
insert into author(email) values('test@naver.com');
alter table author add column updated_at datetime; 업데이트 엣 데이트타입의 자료형으로 테이블에 추가
alter table author rename 새로운 테이블 명;
alter table author MODIFY COLUMN created_at datetime DEFAULT CURRENT_TIMESTAMP;
insert into author(email) values('abc')
email컬럼에 unique 옵션을 걸어보자, 그런데 이미 중복된 데이터가 있으면 에러가 나므로 중복데이터는
삭제 후에 옵션을 걸어야 함
DELETE FROM AUTHOR WHERE ID = ?(중복id); 삭제옵션
:한 row를 다 지우기 때문에 컬럼명이나 *를 지정해줄 필요가 없다.
alter table author MODIFY COLUMN email VARCHAR(40) NOT NULL UNIQUE 
테이블 구성 변경 : ALTER table 테이블명 + 옵션
테이블명 변경 : ALTER TABLE 테이블명 RENAME 새로운테이블명; 
datetime insert 방법 : '2022-06-05 00:00:00'
insert into author(created_at) datetime '2022-06-05'
컬럼 삭제 : alter table author drop column 삭제할컬럼명; updated_at 삭제
컬럼명 변경 : alter table author rename column 변경대상 컬럼명 TO 변경하고자하는 컬럼명
pw -> password
TRUNCATE : 테이블의 DATA만을 전부 지울때 사용
TRUNCATE TABLE 테이블 명;
DLETE와의 차이점은 :  delete는 삭제후 복구가 가능하나, trucate는 복구 불가
		   truncate가 삭제속도는 더 빠름.
		   delete from author; -> id 값이 그 전의 count+1 부터()
		   truncate는 id가 1부터 시작


practice 테이블 만들고 코인시세 정보 파이썬에서 가져오기
create table coin_price(id BIGINT AUTO_INCREMENT,
 coin_name VARCHAR(20), last_price VARCHAR(100),
 created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
 PRIMARY KEY(id));

create table post(id BIGINT AUTO_INCREMENT, title VARCHAR(30), CONTENTS VARCHAR(255), author_id BIGINT, PRIMARY KEY(id), FOREIGN KEY(author_id) REFERENCES author(id))
insert into post(title, contents, author_id) values ("hello","hello is ...", 100);

update기본구문
update 테이블명 set 컬렴명1 = 데이터 값1, 컬럼명2 = 데이터값2; 
where문으로 조건을 걸지 않으면 위 update 문이 모든데이터에 적용
mysql에서 =는 같다, 할당에 의미 2가지를 가지고 있다.
update author set name = 'hongildong2', password = '4321' where id > 4;
4이상인 애들의 이름을 hongildon2로 비밀번호를 4321로 바꾸기

mysql 연산자: 같지 않다 !=, <>, 2개사용,  
IS NULL, IS NOT NULL : 비어 있거나, 비어있지 않거나
- 포함 범위 연산 방식 1) 10 < id AND id>5
		   2) Between min and max
in(리스트 값), not in(리스트 값) 
id가 3, 5, 7인 데이터를 모두 조회하라
in을 사용하여 post table에 글을 쓴 author만 조회하도록 하여라
select * from author where id in (select author_id from post);
select count(*) from author where id in (select author_id from post); : 글쓴 사람은 몇명인지 (3)
and &&도가능, or ||도 가능  


ROLE이 비어 있는경우 모두 조회
DCL : 사용자 권한 관리


database tap -> connect to databases
127.0.0.1 라는 ip는 localhost(내ip)를 의미한다 
포트번호 누르고 3406, connect 누르고 -> password
set as defalut 스키마 눌러(이 스키마를 사용할 것이다 세팅할 것이다)
select * from author; 
ctrl + enter 누르면 실행 
distinct = 중복제거 보여주기
중복제거 select distinct name from author; 
count 함수 : 조회결과의 숫자값을 return
select count(distinct name) from author; (중복을 제외한 이름의 개수)
select count(name) form author; = ★select count(*) from author; # 줄 수이기 때문에 같은 결과를 출력할 것
select count(distinct *의경우 오류, 유니크 pk값이 있기때문에)
- 조회결과의 컬럼명을 변경하는 as 키워드(as = 별칭)
select count(distinct name) as count_name from author;
order by 뒤에 정렬하고 싶은 기준 컬럼을 넣는다. 
->중복되는 데이터 내에서 email로 다시 오름차순 정렬 
select * from author order by id desc; : id를 기준으로 내림차순 정렬
select * from author order by name asc;(asc는 오름차순이고, 기본적으로 오름차순, 생략가능)
insert into author(name, email) values('aaa', 'a1');
★1) name만을 기준으로 오름차순 정렬
select * from author order by name asc;
★2) name, email 을 기준으로 오름차순 정렬
->name으로 먼저 오름차순 정렬을 하고, name이 중복되는 데이터가 있는경우
->그 다음에 mail을 오름차순 정렬
select * from author order by name, email;
3) name은 오름차순 emali은 내림차순으로 정렬
select * from author order by name asc, email desc;

정수 : tinyint(1바이트), int(4바이트), bigint(8) 
# tinyint -128 ~127까지의 범위, 1바이트, 대표적으로 나이값
# int는 그 외 대부분 숫자값
# bigint 는 ID값, 또는 큰 금액의 숫자값, 
tinyint unsigned = 음수를 제외하고 255까지 사용가능(0~255)

board 스키마 안에서
pratice_int 테이블 생성. id 1 tityint, id2 int, id3 bigint
insert into practice_int
insert into practice_int(id1) values(1000); # 오류
insert into practice_int(id1) values(100); # 얘는 괜츈

소수점이 있는 실수를 표현해야 하는 경우에는 DECIMAL타입을 사용.
정수부 30자리에 소수부는 4자리
practice_float테이블에 정수부 30자리에 소수부는 4자리 decimal 타입을 사용
create table practice_float(id1 decimal(30,4)); (m,d) m은 정수부, d는 실수부 
->10/3 -> 3.3333(뒤에 소수점을 4자리까지만 표현)
m.d생략시에는 기본적으로 10.0

varchar의 표현식
-varchar(M) : M길의 글자수 지정
-M은 최대 글자수를 의미. UTF-8인 경우 1글자에 4바이트 이상
-ex)varchar(10) 40바이트 할당, 
그런데, varchar는 길이를 지정하더라도 실제 입력된 문자열의 길이만큼만 저장하고 사용, 
그래서 M의 의미가 최대값을 의미하는 것
(max글자에서 3글자쓰면 12바이트할당 가변), 
char는 고정길이로 지정된 길이만큼을 사전에 차지하는 것
text 타입 : 최대 65.353바이트, 가변, 용량이 많은 문자열 저장
text와 varchar의 차이점과 공통점 : 
공통점 : 둘다 최대크기 65535이고 가변데이터(할당된 만큼 바이트)
차이점 : varchar는 메모리를 적극적으로 사용하여 속도가 빠르나 메모리 낭비가 발생할 수 있다.
           text는 메모리 사용이 적어, 속도는 느리나 메모리 효율적
           varchar는 (m)을 사용하여 최대크기를 지정하나, Text는 별도로 최대크기 지정X
           text는 b-tree 인덱스 불가 full-text 인덱스가능
           varchar b-tree 인덱스 가능
이미지를 DB에 저장시키는 방법
1. path만 넣어두고, 실제 저장은 disk에
2. 이미지 파일 그 자체를 2진법체계로 변환시킨 바이너리 파일 형태로 DB에 통째로 저장
	(바이너리 형태로 데이터를 저장하면 메모리를 상당히 많이 차지)
BLOB(블롭) : 다양한 크기의 바이너리 데이터를 저장할 수 있는 타입,() 
                일반적으로 PNG와 같은 이미지 파일을 저장할 때 지정하는 타입 
ENUM : 미리 들어갈 수 있는 특징 특정 데이터의 값을 지정, 컬럼명 ENUM(데이터값1, 데이터값2...)
ex) alter table author MODIFY COLUMN role ENUM('user', 'admin');
#이렇게 입력 시 user, admin 값만 지정가능
ex) alter table author MODIFY COLUMN role ENUM('user', 'admin') NOT NULL DEFAULT 'user';
#이렇게 입력시 기본값은 user로 설정한다
insert into author(email, role) values('aaa'@naver.com, 'super_user');

Date : 날짜를 저장할 수 있는 타입, yyyy-min-dd
datetime: 날짜와 함께 시간까지 저장 m지정시 소수점까지 저장
	 yyyy-min-hh:mm:ss 가장 많이 사용하는 방식
select * from author where created_at > '2023-06'; 데이터타임으로 조회하기
select count(*) from author where created_at > '2023-06-07'; 6월 7일 이후로 가입한 회원 수
insert into author(email, created_at) values('b1@naver,com', '2022-03-01');
sum함수 : 특정컬럼의 총합계
ex) select sum(id) from author where created_at between 2023-06-01 and '2023-07-01';
# author 테이블안에 id값을 6월 한달 내에 값을 다 더한다
avg : 특정컬럼의 평균금액
# select avg(revenue) from author where created_at between 2023-06-01 and '2023-07-01'
# author항목안에 revenue값들의 평균을 구한다(6월 한달 내에)

특정 문자패턴 검색 : select + like + %(any)
ex) select * from author where name like 'hong'
ex) select * from author where name like 'hong%' 홍으로 시작하는 것
ex) select * from author where name like '%hong' 홍으로 끝나는 것

email이 test라는 문자로 시작하면서, 이름은 hong으로 시작되는 데이터를 모두 검색해라
select * from author where email like 'test%' and name like 'hong%';
테스트와 홍으로 시작하지 않는 데이터
select * from author where email not like 'test%' and name not like 'hong%' 

select now(); 현재 시간 표시
insert into author(email, created_at) values ('abc2@naver,com', now());
현재시간을 abc2@naver.com에 넣는다

cast는 a의 값을 특정하게 변화할때 사용한다
select cast(20200101 as datetime); => 2020-01-01 03:03:01 이런 형태로 변환 
created_at은 20220101030201 cast를 사용하여, data insert 
insert into author(email, created_at) values ('aacs@naver.com', cast(20200101 AS DATETIME));

pk, fk, unique 제약 조건을 걸게되면, 자동으로 index가 생성된다.(내가 지정한 컬럼(ex) name))
별도로 생성의 경우 index페이지가 만들어진다. 
-> 중요한 값 -> 조회를 자주한다
name 인덱스가 있어도, where 조건에 name이 없으면 index를 안탄다.
ex) show index from authror;
CREATE INDEX my_index ON author(name);

Cardinality : 데이터의 다양성(데이터가 중복이 되는 것이 많은 경우index하는 것이 비효율적)
SELECT CONSTRAINT_NAME FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE TABLE_NAME = 'post';

foreign key 제약조건
: on update/delete 옵션이 별도로 없으면 restrict(삭제안됨)가 default
: on delete cascade : 참조 테이블의 key값이 삭제되면, 참조하는 테이블의 데이터도 같이 삭제
: on delete set null : 참조 테이블의 key값이 삭제되면, 참조하는 테이블의 fk값에 null이 setting.
: soft delete / hard delete가 있는데, 최근 추세는 대부분 soft delete를 하고 있음.

ALTER TABLE post DROP FOREIGN KEY post_ibfk_1, DROP INDEX author_id;
ALTER TABLE post ADD CONSTRAINT post_author_fk FOREIGN KEY (author_id) REFERENCES author(id) ON DELETE CASCADE;

post에 있는 author_id 값을 author 테이블에서 지워보는것

ALTER TABLE post DROP FOREIGN KEY post_author_fk, DROP INDEX  post_author_fk;
ALTER TABLE post ADD CONSTRAINT post_author_fk FOREIGN KEY (author_id) REFERENCES author(id) ON DELETE SET NULL;

Case value
WHEN [compare_value] THEN result
WHEN [compare_value] THEN result
ELSE result
END
- mysql에는 if, else if문이 없다. 그대신 위의 case when 구문이있다.
#90점이상이면 a, 80점이상이면 b, 70점이상이면 c, 나머지는 f 사례
create table grade_table(name varchar(10), grade int);
insert into grade_table(name, grade) values('john1', 85);
insert into grade_table(name, grade) values('john2', 75);
insert into grade_table(name, grade) values('john3', 95);

select name. 
CASE  WHEN grade >= 90 THEN 'A' 
WHEN grade >= 80 THEN 'B' 
WHEN grade >= 70 THEN 'C' 
ELSE 'F' 
END 
from grade_table;

if(조건, b,c)
: 조건이 참이면 b를 return, 조건이 거짓이면 c를 return
role이 null이면 user return, 나머지는 그대로
select name, email, if(role IS NULL, 'user', role) as my_role from author;

IFNULL(a,b)
: a가 null이 아니면 a반환, a가 null이면 b반환
: select name, email, ifnull(role, 'user') from author;

--------------------------------------------------------------------------------------
post테이블에서 데이터를 select한다. 
post table = author_id, 작성글, contents
author table = 이름과 author_id, emali
그런데, author의 이름이 조회도록 select하라
left join(기준 테이블에 join해라), inner join(공통점(주로Foringe key)이 있는 값만 join)
author테이블의 id값과 post 테이블의 author_id값을 inner join 하는데 빈값이 있으면 null
inner 조인을 쓸 것인가? left 조인을 쓸것인가? -> null 값을 포함할 것인가? 아닌가?
null값을 포함한다면 left, 아니라면 inner 조인
left값은 무엇을 기준으로 할 것인가에 대한 문제
1) 전체 회원관리 = left join, 글은썼지만 익명일 경우에도 조회하고자 할때
2) 활성 회원관리 = inner join, 글을 썼고 author_id와 name, email등 값을 가지고 있을 때

join이란 두개 이상의 테이블의 컬럼을 조합하는 것
join은 크게 inner join과 outer join이 있고, outer join에는 left outer join과 right outer join이 있다.
A테이블 left (outer) join B테이블 : A테이블을 기준으로 B테이블 결합.
A테이블 inner join B테이블 : A와 B테이블의 공통변수가 있는 date만 조회

select * from tableA INNER JOIN tableB ON tableA.ID = tableB.A_ID(on 연결점)
select * from tableA (AS) a INNER JOIN tableB (AS) b ON a.ID = b.a_ID(as는 생략가능)
select a.name, b.title from tableA (AS) a INNER JOIN tableB (AS) b ON a.ID = b.a_ID(as는 생략가능)

author, post에 inner join을 걸어서
author.name, author.email, post.title만을 조회해보자
select author.name, author.email, post.title from author inner join post on author.id = post.author_id;
select a.name, a.email, p.title from author a inner join post p on a.id = p.author_id;

select * from tableA a LEFT JOIN tableB b on a.id = b.a_id
select * from author a LEFT JOIN post p on a.id = p.author_id;
(author 기준으로 전체 값이 출력, post에 있는 값들도 모두)
select * from post p LEFT JOIN author a on p.id = p.author_id;
(post기준으로 title과 contens가 있는 값들만 출력)
select * from author a LEFT JOIN post p on a.id = p.author_id;

select * from author a inner join post p on a.id = p.author_id where p. id >5 ordby
SELECT a.FLAVOR FROM FIRST_HALF a 
INNER JOIN ICECREAM_INFO b ON a.FLAVOR = b.FLAVOR 
where a.TOTAL_ORDER > 3000 and b.INGREDIENT_TYPE LIKE 'fruit_based'  
ORDER BY a.TOTAL_ORDER DESC;

SELECT FLAVOR FROM FIRST_HALF 
WHERE TOTAL_ORDER > 3000 AND 
FLAVOR IN (SELECT FLAVOR FROM ICECREAM_INFO WHERE INGREDIENT_TYPE = 'fruit_based') 
ORDER BY TOTAL_ORDER DESC;


SELECT 
        b.BOOK_ID as BOOK_ID ,
        a.AUTHOR_NAME as AUTHOR_NAME,
        DATE_FORMAT(b.PUBLISHED_DATE, '%Y-%m-%d') AS PUBLISHED_DATE
FROM BOOK b
LEFT JOIN AUTHOR a ON b.AUTHOR_ID = A.AUTHOR_ID
    WHERE b.CATEGORY = '경제'
ORDER BY b.PUBLISHED_DATE ASC

UNION : 여러개의 SELECT문의 결과를 하나의 테이블로 결과 집합으로 표현(필드에 개수와 타입은 모두 같아야한다)
ex) select id, name, email from author union all select id, title, contents from post;
union all 중복을 제거 하지 않은, union은 행에 중복되는 데이터가 있으면 중복제거, 
컬럼별 개수와 타입이 같아야 한다.

SELECT * FROM author where id in (select author_id form post); = inner join

★GROUP BY
GROUP BY 컬럼명 : 해당 컬럼을 그룹의 기준으로 데이터 전체를 그룹화
		주요 사용 목적으로는 데이터값 집계 + 집계함수 함께 사용.

SELECT * FROM POST;
select author_id from post group by author_id;
select author_id, count(*) from post group by author_id;
select author_id, count(*), sum(id), avg(id) from post group by author_id;
select a.name, count(p.id) from post p left join author a on a.id = p.author_id group by p.author_id;

HAVING 절
group + having 조건절
: 구문전체에 대한 조건절은 while이고, having은 그룹화된 데이터에 대한 조건절.
select author_id, count(*) as count from post where id > 3 group by author_id having count > 1;
select author_id, sum(revenue) as count from post where id > 2 group by author_id having count > 1;


지점테이블
CREATE TABLE branches (
    id BIGINT PRIMARY KEY,
    name VARCHAR(255),
    location VARCHAR(255));

매출테이블
CREATE TABLE sales (
    id BIGINT PRIMARY KEY,
    product_name VARCHAR(255),
    created_date DATE,
    amount DECIMAL(10, 2),
    branch_id BIGINT,
    FOREIGN KEY (branch_id) REFERENCES branches(id));

-- 데이터 삽입
INSERT INTO branches (id, name, location)
VALUES (1, 'branch A', 'seoul'),
       (2, 'branch B', 'busan'),
       (3, 'branch C', 'daegu'),
       (4, 'branch D', 'incheon'),
       (5, 'branch E', 'gwanju');

INSERT INTO sales (id, product_name, created_date, amount, branch_id)
VALUES (1, 'product A', '2023-01-01', 1000.50, 1),
       (2, 'product B', '2023-01-02', 1500.75, 2),
       (3, 'product A', '2023-01-03', 800.25, 1),
       (4, 'product C', '2023-01-03', 1200.00,2 ),
       (5, 'product B', '2023-01-04', 500.00,3),
       (6, 'product B', '2023-01-04', 1500.00,3),
       (7, 'product B', '2023-01-04', 1000.00,3);

INSERT INTO sales (id, product_name, created_date, amount, branch_id)
VALUES (8, 'product A', '2022-01-01', 1000.50, 1),
       (9, 'product B', '2022-01-02', 1500.75, 2),
       (10, 'product A', '2022-01-03', 800.25, 1),
       (11, 'product C', '2022-01-03', 1200.00,2 ),
       (12, 'product B', '2022-01-04', 500.00,3),
       (13, 'product B', '2022-01-04', 1500.00,3),
       (14, 'product B', '2022-01-04', 1000.00,3);
지점테이블
CREATE TABLE branches / sales table

-sales 테이블에서 지점별(지점id) 평균매출
select branch_id, avg(amount) from sales group by branch_id;
-sales 테이블에서 각 지점별 총 매출 
select branch_id, sum(amount) from sales group by branch_id;
- 1월 지점별 매출
select author_id, count(*) as count from post where id > 3 group by author_id having count > 1;
select author_id, sum(revenue) as count from post where id > 2 group by author_id having count > 1;

SELECT * FROM author where id in (select author_id form post); = inner join

2022년 한해동안 지점별 총매출을구하라, 
정렬은 금액 내림차순 단, 총매출이 2000이상인 지점만 출력하자
 지점 name, 총매출액 

select branch_id, sum(amount) from sales group by branch_id;
select branch_id, sum(amount) from sales where created_date >= '2022-01-01' and created_date > '2023-01-01' group by branch_id;
select branch_id, sum(amount) from sales where created_date >= '2022-01-01' and created_date > '2023-01-01' group by branch_id having sum(amount) >= 2000;
select b.name, sum(s.amount) from sales s inner join branches b on b.id = s.branch_id where s.created_date >= '2022-01-01' and s.created_date > '2023-01-01' group by s.branch_id having sum(amount) >= 2000;

SELECT i.INGREDIENT_TYPE, SUM(f.TOTAL_ORDER)
FROM ICECREAM_INFO i, FIRST_HALF f
WHERE i.FLAVOR = f.FLAVOR
GROUP BY i.INGREDIENT_TYPE
ORDER BY f.TOTAL_ORDER ASC
-----------------------------------------------------------------------------------------------------
INDEX : 자주사용되는 필드 값으로 만들어진 원본 테이블의 사본, 색인과 목차로 이해
-MYSQL은 데이터 검색 시 첫번째 필드부터 차례대로 모든 데이터를 검색,
인덱스를 사용하면 테이블 전체를 읽지 않아도된다. 

인덱스 조회 명령어 : show index from 테이블명
PK, UNIQUE, FK 컬럼은 자동으로 INDEX가 생성된다.
직접 인덱스를 생성하고 싶으면 아래 명령어
create index 인덱스 이름 on 테이블명 (컬럼1, 컬럼2..)

cardinality란 컬럼내의 data의 종류 개수(PK,UNIQUE = 데이터의 개수, ex) name 중복은 빼기)
cardinality가 높은 컬럼에 index를 걸어야 효율적(pk,unique 효율이 극대화여서 미리 index형성)

author에 name, role에 인덱스를 만들어보자
create index my_index2 on author(name, role);

select * from author where name = 'hong' and role ='user'

트랜잭션(트란)은 데이터베이스에서 수행되는 하나 이상의 작업(쿼리)을 논리적으로 묶어서 실행하는 단위
=> 모든 작업이 정상완료되어야 작업의 결과를 확정, 
만약 하나라도 에러가 나오면 모두 원상복구(ACID)
- 원자성(Atomicity 하나로 취급하여 하나라도 실패시 실행 X)
- 일관성(Consistency 트랜잭션 완료 시, 잔액의 합계가 일정) 
- 고립성(Isolation 다른 트랜잭션이 끼어들 수 없다.)
- 영속성(Durablilty 물리적데이터에 저장)
ex)
start TRANSACTION;
	insert into author ......
	update post set.....
commit; [만약에 위 쿼리중 하나가 문제가 있으먄 rollback;].
mysql은 별로도 transaction구문이없으면 자동으로 
auto commit은 트랜잭션 작업 확정, rollback하면 트랜잭션 원상복구.

ex)
start TRANSACTION;
insert into author ......
case 
when row_count() = 0 then rollback(구문실패 맨 처음으로)
when row_count() = 1 then commit
else commit;
end 
update post.....
case
when row_count() = 0 then rollback;(구문실패 맨 처음으로)
when row_count() = 1 then commit;
else commit;
end
commit; - transation은 여기서 실행(모두가 commit상황에서)

실무에서는 sql 쿼리로 transaction 짜는 경우는 많지는 않고, 
일반적으로 웹프레임워크에서 transaction을 잡고 쿼리를 실행한다.
def orders();
     insert into author ....
     update post ....
-(함수 안에 트랜잭션을 짜면 묶어버림)
프레임 워크마다 다르기때문에, 프로그램 내에서 별도로 Transaction처리를
해줘야 하는 경우는 많다
★ex) 예외 발생 시 rollback처리, 
try xxxx:
    (쿼리문)
    commit;
except Excption e;
    rollback;

------------------------------------여기까지 mysql문

html은 if, for while 등 제어문이 x, 프로그래밍 언어가 X

<!DOCTYPE html> - html의 시작, 생략가능  
<html> - html 파일을 열기
  <head> - head부분
     <title> big data class</title> - title은 헤드부분에서 적어야 하고 
	# <title>, <style>(css,디자인), <script>(javascript), <meta> 등이 있음
               <style> class가 my_p인 애들은 노란색으로 묶기 
 </head>

  <body> - 내용 부분
      <h1>hello world1</h1> # 중간에 아무리 스페이스를 많이 눌러도 한칸만 인식
      <h2>hello world2</h2> # h1과 h2의 차이 중요도차이, 폰트차이 
      <p>hello world3</p>  일반단락을 나타낼때 p를 씀. 줄바꿈이 됨
       <p class my_p>hello world4</p>
  </body>
</html>

1. 화면만
2. 화면에 data를 미리 담아서 
3. (현대적인방식) html+javascript를 통해서 django서버에 data(json)를 요청해서 받는 방식

HyperText Markup(<>) language의 약자
<태그이름> / 시작태그
</태그이름> / 종료태그
<br>, <hr> - 종료태그없이 시작태그만을 가지는 태그

강조 효과​

<b>태그(bold text) : 굵게​

<strong>태그 : 굵게 && 중요함​

<i>태그 : 이탤릭체​

<em>태그 : 이탤릭체 && 중요함​

<mark>태그 : 형광펜 하이라이팅​


삭제 효과​

<del>태그(delete) : 중앙가로줄​

​

위첨자와 아래첨자 효과​

<sup>태그 : 제곱을 나타내는데 사용​

<sub>태그 : H2O같은 화학기호에서 2를 아래첨자로 사용할때

주석은  웹 브라우저에 의해 해석되지 않음​


표현 방법​

<!-- 주석내용 -->​

엔티티​

HTML 예약어를 문자 그대로 사용하기 위한 별도의 문자셋​

예시​

<p><p> 태그는 두 번째로 큰 제목을 나타내는 태그입니다.</p>​

<p>&lt;p&gt;태그는 단락을 나타내는 태그입니다.</p>​

공백을 의미하는 엔티티는 &nbsp; ​

<태그이름 style="속성이름:속성값">​

배경색 변경​

<h1 style="background-color:red">​

     style 속성을 이용한 배경색 변경​

</h1>​

글자색 변경​

<h1 style="color:maroon">​

    style 속성을 이용한 글자색 변경​

</h1>​

글자 크기 변경​

<h1 style="font-size:250%">​

    style 속성을 이용한 글자 크기 변경​

</h1>​

한꺼번에​

<h1 style="background-color:white; color:maroon; font-size:150%; text-align:center">​

    style 속성을 이용하여 한 번에 스타일링 하기!​

</h1>​

배경을 다른 이미지로 변경​

<body background="/examples/images/img_background_good.png">​

      </body>

HTML 링크(Link)​

<a href="링크주소”, target="_blank">HTML 링크</a>​

 target="_blank” : 새 창이나 새 탭에서 오픈​

_self :  현재 프레임(frame)에서 오픈. (기본설정)

순서가 없는 리스트를 만들기

<img src="이미지주소url" alt="대체문자열” width="320" height="214">​

대체문자열이란 이미지 로딩이 안될때 대신 나타낼 문자열​

witdth, height 으로 길이 넓이 지정 가능​

style="width:320px; height:214px＂ 방식으로 설정도 가능​

 style="border: 3px solid black＂​

위 방식으로 테두리 픽셀 지정가능​

이미지에 링크설정​

<a href="/html/intro" target="_blank">​

    <img src="/examples/images/img_flag.png" style="width:320px; height:214px">​

</a>

순서가 없는 리스트(unordered)​

<ul><li></li></ul>​

순서가 없는 리스트는 <ul>태그로 시작, 각각의 리스트 요소는 <li>태그로 시작​

<ul style="list-style-type: circle"></ul>​

list-style-type 속성을 사용하여 마커 모양 변경​

circle(흰색원), square, disc(검은색원-기본설정) 등​

순서가 있는 리스트(ordered)​

<ol><li></li></ol>​

<ol style="list-style-type: upper-alpha"></ol>​

decimal(숫자-기본), upper-alpha(영문대문자), upper-roman(로마숫자대문자) 

<table>태그를 사용하여 이러한 테이블을 작성​

<th>태그는각 열의 제목​

<tr>태그는 테이블에서 행을 의미​

<td>태그는 tr안에 정의​

테이블의 행의 각 셀을 의미​

th의 갯수만큼 td의 갯수​

<thead><tbody>등의 tag안에 위 3태그를 넣어 구분하기도 함​

<caption>태그를 사용하면 테이블 상단에 제목

div태그​

다른 HTML 요소들을 하나로 묶는 데 사용​

가장 빈번히 사용되는 태그 중 하나​

여러 요소들의 스타일을 한 번에 적용하는 예제​

<div style="background-color:lightgrey; color:green; text-align:center">​

    <h1>div요소를 이용한 스타일 적용</h1>​

    <p>이렇게 div요소로 여러 요소들을 묶은 다음에 style 속성과 클래스 등을 이용하여​

    한 번에 스타일을 적용할 수 있습니다.</p>​

</div>

웹 페이지에서는 form 요소를 사용하여 사용자로부터 입력​

사용자가 입력한 데이터를 서버로 보낼 때 form 요소를 사용​

<form action="처리할페이지주소" method="get 또는 post"></form>​

action 속성은 입력받은 데이터를 처리할 서버 주소를 명시​

Get요청은 url을 통해서 서버에 데이터 전송​(request, 회원정보와 같이 민감한 정보가 없을 때)

Post요청은 url이 아닌, 눈에 보이지 않은 request body에 data를 넣어 전달​​

form 요소 그 자체는 웹 페이지에 나타나지 않고, input요소와 함께 보통 사용​

input 요소를 통해 사용자로부터 입력

★<form action="받아줄url" method="post"> 
이름 : <input type="text"><br> # text는 문자열 
이메일 : <input type="text"><br>
패스워드 : <input type="password"><br> # password 타입
<input type="submit" value="회원가입"> # 제출

document.getElementById("my_from").onsubmit = function(){   };
submit 버튼이 눌리기전에 낚아채서 함수 실행

1)인라인 : 태그안에 style
2)내부스타일 : 태그명{}, id(#아이디명{}), class(.클래스명{})
3)외부스타일 : <link rel = "stylesheet" href="/expand_style.css">

ex) p{
padding-top:20px

}.header{

backround - color: # 007bff:
}
# abc{
background-color: #007bff:
}

h1 hello world 1  -> 태그명 스타일 color red
h2 hello world 2  -> 인라인 스타일 color
h3 hello world 3  -> id 지정 후 스타일 color
h4 hello world 4 (class명 hello) -> class 지정후 스타일 
h4 hello world 4 (class명 hello) -> class 지정후 스타일

자바스크립트에서 함수란 특정 기능을 위해 설계된 독립적인 블록​

java에서의 메서드와 유사, 그러나 클래스를 통한 메서드가 아닌, 독립적 함수​

​

<body>​

<h1>자바스크립트 함수</h1>​

<script>​

function addNum(x, y) {return x + y;}​

document.write(addNum(2, 3));​

</script>​

</body>

부트스트랩​

Twitter에서 만든 오픈 소스 프레임워크​

웹 페이지를 디자인할 때 자주 사용되는 스타일을 미리 정의해 놓은 라이브러리​

CSS와 JavaScript를 일일이 작성하지 않아도 된다​

jQuery도 Twitter에서 개발한 자바스크립트 라이브러리 중 하나​

(예제)​

​

<head>​

<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">​

</head>​

​

<body>​

<div class="container">​

<p>This is a very simple Bootstrap example.</p>​

<button class="btn btn-primary">Click me!</button>​

</div>​

</body>

pip install django